{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport ReactHtmlParser, { convertNodeToElement } from 'react-html-parser';\nimport ScriptTag from 'react-script-tag';\nimport Link from './link';\nimport _ from 'lodash';\n\nconst convertChildren = (children, index) => _.map(children, childNode => convertNodeToElement(childNode, index, _.noop()));\n\nexport default function htmlToReact(html) {\n  if (!html) {\n    return null;\n  }\n\n  return ReactHtmlParser(html, {\n    transform: (node, index) => {\n      if (node.type === 'script') {\n        if (!_.isEmpty(node.children)) {\n          return /*#__PURE__*/_jsx(ScriptTag, _objectSpread(_objectSpread({}, node.attribs), {}, {\n            children: convertChildren(node.children, index)\n          }), index);\n        } else {\n          return /*#__PURE__*/_jsx(ScriptTag, _objectSpread({}, node.attribs), index);\n        }\n      } else if (node.type === 'tag' && node.name === 'a') {\n        const href = node.attribs.href;\n\n        const props = _.omit(node.attribs, 'href'); // use Link only if there are no custom attributes like style, class, and what's not that might break react\n\n\n        if (_.isEmpty(props)) {\n          return /*#__PURE__*/_jsx(Link, _objectSpread(_objectSpread({\n            href: href\n          }, props), {}, {\n            children: convertChildren(node.children, index)\n          }), index);\n        }\n      }\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}