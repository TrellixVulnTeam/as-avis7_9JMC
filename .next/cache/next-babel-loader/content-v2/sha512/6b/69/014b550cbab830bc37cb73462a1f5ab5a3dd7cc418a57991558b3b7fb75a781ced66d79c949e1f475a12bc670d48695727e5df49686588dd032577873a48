{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _classCallCheck from \"/home/poun/as-avis7/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/poun/as-avis7/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/poun/as-avis7/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/poun/as-avis7/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/poun/as-avis7/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport _ from 'lodash';\nimport components, { Layout } from '../components/index';\nimport { getPageUrl } from '../utils';\n\nvar Advanced = /*#__PURE__*/function (_React$Component) {\n  _inherits(Advanced, _React$Component);\n\n  var _super = _createSuper(Advanced);\n\n  function Advanced() {\n    _classCallCheck(this, Advanced);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Advanced, [{\n    key: \"render\",\n    value: function render() {\n      var data = _.get(this.props, 'data');\n\n      var config = _.get(data, 'config');\n\n      var posts = _.get(this.props, 'posts');\n\n      var page = _.get(this.props, 'page');\n\n      var sections = _.get(page, 'sections');\n\n      var pageUrl = getPageUrl(page);\n      return /*#__PURE__*/_jsx(Layout, {\n        page: page,\n        config: config,\n        children: _.map(sections, function (section, index) {\n          var sectionType = _.get(section, 'type');\n\n          var component = _.upperFirst(_.camelCase(sectionType));\n\n          if (!component) {\n            throw new Error(\"page section does not have the 'type' property, page: \".concat(pageUrl));\n          }\n\n          var Component = components[component];\n\n          if (!Component) {\n            throw new Error(\"no component matching the page section's type: \".concat(sectionType));\n          }\n\n          return /*#__PURE__*/_jsx(Component, {\n            section: section,\n            data: data,\n            posts: posts\n          }, index);\n        })\n      });\n    }\n  }]);\n\n  return Advanced;\n}(React.Component);\n\nexport { Advanced as default };","map":null,"metadata":{},"sourceType":"module"}